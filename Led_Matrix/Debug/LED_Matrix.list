
LED_Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000824  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009e8  080009e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009e8  080009e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080009e8  080009e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009e8  080009e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009e8  080009e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009ec  080009ec  000109ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080009f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000078  08000a68  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08000a68  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e60  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f4d  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002f8  00000000  00000000  00026e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000270  00000000  00000000  00027150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020dd3  00000000  00000000  000273c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000048ca  00000000  00000000  00048193  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4d2e  00000000  00000000  0004ca5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011178b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000098c  00000000  00000000  00111808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000078 	.word	0x20000078
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009d0 	.word	0x080009d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000007c 	.word	0x2000007c
 8000200:	080009d0 	.word	0x080009d0

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	; (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <gpioinit>:
 * Inizialize the GPIO pins
 * SCK_PIN : PA5 (SPI clock)
 * MOSI_PIN : PA7 (SPI dataout)
 * CS_PIN : PB5
 */
void gpioinit(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af02      	add	r7, sp, #8

    RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOA);
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <gpioinit+0x54>)
 8000248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024a:	4a12      	ldr	r2, [pc, #72]	; (8000294 <gpioinit+0x54>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6313      	str	r3, [r2, #48]	; 0x30
    RCC_AHB1_CLKEN(RCC_AHB1Peri_GPIOB);
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <gpioinit+0x54>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000256:	4a0f      	ldr	r2, [pc, #60]	; (8000294 <gpioinit+0x54>)
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6313      	str	r3, [r2, #48]	; 0x30

    GPIO_Config(GPIOA, SCK_PIN, Alternate_Mode, No, AF_SPI);   //SCK PIN
 800025e:	2305      	movs	r3, #5
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2202      	movs	r2, #2
 8000266:	2105      	movs	r1, #5
 8000268:	480b      	ldr	r0, [pc, #44]	; (8000298 <gpioinit+0x58>)
 800026a:	f000 fa85 	bl	8000778 <GPIO_Config>
    GPIO_Config(GPIOA, MOSI_PIN, Alternate_Mode, No, AF_SPI);  //MOSI PIN
 800026e:	2305      	movs	r3, #5
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	2202      	movs	r2, #2
 8000276:	2107      	movs	r1, #7
 8000278:	4807      	ldr	r0, [pc, #28]	; (8000298 <gpioinit+0x58>)
 800027a:	f000 fa7d 	bl	8000778 <GPIO_Config>
    GPIO_Config(GPIOB, CS_PIN, Output_Mode, Pull_Down, AF0);   //CS   PIN
 800027e:	2300      	movs	r3, #0
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2302      	movs	r3, #2
 8000284:	2201      	movs	r2, #1
 8000286:	2105      	movs	r1, #5
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <gpioinit+0x5c>)
 800028a:	f000 fa75 	bl	8000778 <GPIO_Config>
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40023800 	.word	0x40023800
 8000298:	40020000 	.word	0x40020000
 800029c:	40020400 	.word	0x40020400

080002a0 <spiinit>:

/*
 * Initialize the SPI1
 */
void spiinit(void) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af04      	add	r7, sp, #16

    RCC_APB2_CLKEN(RCC_APB2Peri_SPI1);
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <spiinit+0x38>)
 80002a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002aa:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <spiinit+0x38>)
 80002ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b0:	6453      	str	r3, [r2, #68]	; 0x44

    SPI_Config(SPI1, SPI_BaudRate_sysclkby16, SPI_BIDIMode_2Line, SPI_First_MSB,
 80002b2:	2301      	movs	r3, #1
 80002b4:	9302      	str	r3, [sp, #8]
 80002b6:	2301      	movs	r3, #1
 80002b8:	9301      	str	r3, [sp, #4]
 80002ba:	2301      	movs	r3, #1
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	2300      	movs	r3, #0
 80002c0:	2200      	movs	r2, #0
 80002c2:	2103      	movs	r1, #3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <spiinit+0x3c>)
 80002c6:	f000 fabd 	bl	8000844 <SPI_Config>
            SPI_DataFrame_16Bit, SPI_Master, SPI_Trasnmit);
    SPI_Enable(SPI1);
 80002ca:	4804      	ldr	r0, [pc, #16]	; (80002dc <spiinit+0x3c>)
 80002cc:	f000 fae5 	bl	800089a <SPI_Enable>
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40013000 	.word	0x40013000

080002e0 <uartinit>:

/*
 * Initialize UART2
 * Send Text From Serial Monitor
 */
void uartinit(void) {
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b08b      	sub	sp, #44	; 0x2c
 80002e4:	af04      	add	r7, sp, #16

    RCC_APB1_CLKEN(RCC_APB1Peri_USART2);
 80002e6:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <uartinit+0x84>)
 80002e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ea:	4a1e      	ldr	r2, [pc, #120]	; (8000364 <uartinit+0x84>)
 80002ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f0:	6413      	str	r3, [r2, #64]	; 0x40
    GPIO_Config(GPIOA, 3, Alternate_Mode, No, AF_SPI_USART);
 80002f2:	2307      	movs	r3, #7
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	2300      	movs	r3, #0
 80002f8:	2202      	movs	r2, #2
 80002fa:	2103      	movs	r1, #3
 80002fc:	481a      	ldr	r0, [pc, #104]	; (8000368 <uartinit+0x88>)
 80002fe:	f000 fa3b 	bl	8000778 <GPIO_Config>
    GPIO_Config(GPIOA, 2, Alternate_Mode, No, AF_SPI_USART);
 8000302:	2307      	movs	r3, #7
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2300      	movs	r3, #0
 8000308:	2202      	movs	r2, #2
 800030a:	2102      	movs	r1, #2
 800030c:	4816      	ldr	r0, [pc, #88]	; (8000368 <uartinit+0x88>)
 800030e:	f000 fa33 	bl	8000778 <GPIO_Config>

    USART_ConfigTypedef huart;

    huart.Mode = USART_TX_RX_ENABLE;
 8000312:	230c      	movs	r3, #12
 8000314:	603b      	str	r3, [r7, #0]
    huart.Oversampling_Mode = Oversampling_16;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
    huart.Parity_Control = Parity_Disable;
 800031a:	2300      	movs	r3, #0
 800031c:	607b      	str	r3, [r7, #4]
    huart.Parity_Selection = Parity_Odd;
 800031e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000322:	60bb      	str	r3, [r7, #8]
    huart.Baudrate = 0x683;  //1200 0x3415 //0x683--9600
 8000324:	f240 6383 	movw	r3, #1667	; 0x683
 8000328:	613b      	str	r3, [r7, #16]

    USART_Config(USART2, huart);
 800032a:	466c      	mov	r4, sp
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000338:	463b      	mov	r3, r7
 800033a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800033c:	480b      	ldr	r0, [pc, #44]	; (800036c <uartinit+0x8c>)
 800033e:	f000 faf4 	bl	800092a <USART_Config>
    UART_IT_EN(USART2, UART_RX_INTEN);
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <uartinit+0x8c>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a09      	ldr	r2, [pc, #36]	; (800036c <uartinit+0x8c>)
 8000348:	f043 0320 	orr.w	r3, r3, #32
 800034c:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(USART2_IRQn);
 800034e:	2026      	movs	r0, #38	; 0x26
 8000350:	f7ff ff58 	bl	8000204 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000354:	b662      	cpsie	i

    __enable_irq();

    USART_Enable(USART2);
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <uartinit+0x8c>)
 8000358:	f000 fb06 	bl	8000968 <USART_Enable>
}
 800035c:	bf00      	nop
 800035e:	371c      	adds	r7, #28
 8000360:	46bd      	mov	sp, r7
 8000362:	bd90      	pop	{r4, r7, pc}
 8000364:	40023800 	.word	0x40023800
 8000368:	40020000 	.word	0x40020000
 800036c:	40004400 	.word	0x40004400

08000370 <USART2_IRQHandler>:

/*
 * USART2 Interrupt Handler
 * Receive text and stores in Buffer
 */
void USART2_IRQHandler(void) {
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0

    uint8_t tempdata;
    static char length = 0;

    //If receive Interrupt flag
    if (CHECK_UART_ITFLAG(USART2, UART_RXIT_FLAG)) {
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <USART2_IRQHandler+0x64>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 0320 	and.w	r3, r3, #32
 800037e:	2b00      	cmp	r3, #0
 8000380:	d022      	beq.n	80003c8 <USART2_IRQHandler+0x58>
        tempdata = Receive_UART(USART2); //USART2->DR;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <USART2_IRQHandler+0x64>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	71fb      	strb	r3, [r7, #7]

        if (tempdata == 0x0A || length > 9) {
 8000388:	79fb      	ldrb	r3, [r7, #7]
 800038a:	2b0a      	cmp	r3, #10
 800038c:	d003      	beq.n	8000396 <USART2_IRQHandler+0x26>
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <USART2_IRQHandler+0x68>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2b09      	cmp	r3, #9
 8000394:	d90c      	bls.n	80003b0 <USART2_IRQHandler+0x40>
            uartbuffer[length - 1] = '\0';
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <USART2_IRQHandler+0x68>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	3b01      	subs	r3, #1
 800039c:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <USART2_IRQHandler+0x6c>)
 800039e:	2100      	movs	r1, #0
 80003a0:	54d1      	strb	r1, [r2, r3]
            length = 0;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <USART2_IRQHandler+0x68>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
            trasmitcomplete = 1;
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <USART2_IRQHandler+0x70>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
        } else {
            uartbuffer[length] = tempdata;
            length = length + 1;
        }
    }
}
 80003ae:	e00b      	b.n	80003c8 <USART2_IRQHandler+0x58>
            uartbuffer[length] = tempdata;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <USART2_IRQHandler+0x68>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4a09      	ldr	r2, [pc, #36]	; (80003dc <USART2_IRQHandler+0x6c>)
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	5453      	strb	r3, [r2, r1]
            length = length + 1;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <USART2_IRQHandler+0x68>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <USART2_IRQHandler+0x68>)
 80003c6:	701a      	strb	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40004400 	.word	0x40004400
 80003d8:	2000009f 	.word	0x2000009f
 80003dc:	20000094 	.word	0x20000094
 80003e0:	2000009e 	.word	0x2000009e

080003e4 <main>:

/*
 * Main functions begins
 */
int main(void) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0

    gpioinit();
 80003ea:	f7ff ff29 	bl	8000240 <gpioinit>
    spiinit();
 80003ee:	f7ff ff57 	bl	80002a0 <spiinit>
    uartinit();
 80003f2:	f7ff ff75 	bl	80002e0 <uartinit>

    while (1) {

        if (trasmitcomplete) {
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <main+0x50>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d014      	beq.n	8000428 <main+0x44>
            for (int l = 0; l < 10; l++) {
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	e00b      	b.n	800041c <main+0x38>
                datas[l] = uartbuffer[l];
 8000404:	4a0c      	ldr	r2, [pc, #48]	; (8000438 <main+0x54>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4413      	add	r3, r2
 800040a:	7819      	ldrb	r1, [r3, #0]
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <main+0x58>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	460a      	mov	r2, r1
 8000414:	701a      	strb	r2, [r3, #0]
            for (int l = 0; l < 10; l++) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b09      	cmp	r3, #9
 8000420:	ddf0      	ble.n	8000404 <main+0x20>
            }
            trasmitcomplete = 0;
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <main+0x50>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
        }
        Scroll_Text(datas);
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <main+0x58>)
 800042a:	f000 f8db 	bl	80005e4 <Scroll_Text>
        delay1();
 800042e:	f000 f807 	bl	8000440 <delay1>
        if (trasmitcomplete) {
 8000432:	e7e0      	b.n	80003f6 <main+0x12>
 8000434:	2000009e 	.word	0x2000009e
 8000438:	20000094 	.word	0x20000094
 800043c:	20000000 	.word	0x20000000

08000440 <delay1>:

    return 0;
}


void delay1(void) {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
    unsigned static volatile long i = 0;
    unsigned static volatile long j = 0;
    for (i = 0; i < 200; i++) {
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <delay1+0x44>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	e012      	b.n	8000472 <delay1+0x32>
        for (j = 0; j < 400;) {
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <delay1+0x48>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	e004      	b.n	800045e <delay1+0x1e>
            j++;
 8000454:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <delay1+0x48>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <delay1+0x48>)
 800045c:	6013      	str	r3, [r2, #0]
        for (j = 0; j < 400;) {
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <delay1+0x48>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000466:	d3f5      	bcc.n	8000454 <delay1+0x14>
    for (i = 0; i < 200; i++) {
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <delay1+0x44>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	4a05      	ldr	r2, [pc, #20]	; (8000484 <delay1+0x44>)
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <delay1+0x44>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	2bc7      	cmp	r3, #199	; 0xc7
 8000478:	d9e8      	bls.n	800044c <delay1+0xc>
        }
    }
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	200000a0 	.word	0x200000a0
 8000488:	200000a4 	.word	0x200000a4

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <HardFault_Handler+0x4>

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <MemManage_Handler+0x4>

080004a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <BusFault_Handler+0x4>

080004ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler+0x4>

080004b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e0:	f000 f842 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <SystemInit+0x28>)
 80004ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <SystemInit+0x28>)
 80004f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <SystemInit+0x28>)
 80004fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000502:	609a      	str	r2, [r3, #8]
#endif
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800054c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000518:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800051a:	e003      	b.n	8000524 <LoopCopyDataInit>

0800051c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800051e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000520:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000522:	3104      	adds	r1, #4

08000524 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000528:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800052c:	d3f6      	bcc.n	800051c <CopyDataInit>
  ldr  r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000530:	e002      	b.n	8000538 <LoopFillZerobss>

08000532 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000532:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000534:	f842 3b04 	str.w	r3, [r2], #4

08000538 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800053a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800053c:	d3f9      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800053e:	f7ff ffd3 	bl	80004e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f000 fa21 	bl	8000988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000546:	f7ff ff4d 	bl	80003e4 <main>
  bx  lr    
 800054a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000550:	080009f0 	.word	0x080009f0
  ldr  r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000558:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800055c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000560:	200000b8 	.word	0x200000b8

08000564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC_IRQHandler>
	...

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	2000000a 	.word	0x2000000a
 800058c:	200000b4 	.word	0x200000b4

08000590 <Set_Register>:
/*
 * Set the data in corresponding Register
 * MSB 8 bit Register Address and LSB 8 bit Data
 *
 */
void Set_Register(int addr, char data) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
    SPI_TxBufferEmpty(SPI1);
 800059c:	480f      	ldr	r0, [pc, #60]	; (80005dc <Set_Register+0x4c>)
 800059e:	f000 f98d 	bl	80008bc <SPI_TxBufferEmpty>
    GPIO_Write(GPIOB, CS_PIN, LOW);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2105      	movs	r1, #5
 80005a6:	480e      	ldr	r0, [pc, #56]	; (80005e0 <Set_Register+0x50>)
 80005a8:	f000 f928 	bl	80007fc <GPIO_Write>
    SPI_Senddata(SPI1, addr << (8) | data);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	78fb      	ldrb	r3, [r7, #3]
 80005b4:	b21b      	sxth	r3, r3
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4619      	mov	r1, r3
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <Set_Register+0x4c>)
 80005c0:	f000 f9a4 	bl	800090c <SPI_Senddata>
    SPI_NotBusy(SPI1);
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <Set_Register+0x4c>)
 80005c6:	f000 f98d 	bl	80008e4 <SPI_NotBusy>
    GPIO_Write(GPIOB, CS_PIN, HIGH);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2105      	movs	r1, #5
 80005ce:	4804      	ldr	r0, [pc, #16]	; (80005e0 <Set_Register+0x50>)
 80005d0:	f000 f914 	bl	80007fc <GPIO_Write>
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013000 	.word	0x40013000
 80005e0:	40020400 	.word	0x40020400

080005e4 <Scroll_Text>:
/*
 * Scroll Characters
 * *data is pointer to array of characters
 *
 */
void Scroll_Text(char *data) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

    Set_Register(MAX7219_SHUTDOWN_REG, 0x00);
 80005ec:	2100      	movs	r1, #0
 80005ee:	200c      	movs	r0, #12
 80005f0:	f7ff ffce 	bl	8000590 <Set_Register>
    Set_Register(MAX7219_SCANLIMIT_REG, 7);
 80005f4:	2107      	movs	r1, #7
 80005f6:	200b      	movs	r0, #11
 80005f8:	f7ff ffca 	bl	8000590 <Set_Register>

    char copyarr[8] = { 0 };
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]

    Copy_Array(*data, characters, copyarr);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f107 0208 	add.w	r2, r7, #8
 800060e:	4927      	ldr	r1, [pc, #156]	; (80006ac <Scroll_Text+0xc8>)
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f84f 	bl	80006b4 <Copy_Array>
    Buffer_Array(copyarr);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f86e 	bl	80006fc <Buffer_Array>

    while (*data) {
 8000620:	e03c      	b.n	800069c <Scroll_Text+0xb8>

        for (int d = 0; d < 8; d++) {
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e033      	b.n	8000690 <Scroll_Text+0xac>
            for (int i = 0; i < 8; i++) {
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	e00b      	b.n	8000646 <Scroll_Text+0x62>
                Set_Register(MAX7219_DIGIT_REG(i), MatrixBuffer[i]);
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	1c58      	adds	r0, r3, #1
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <Scroll_Text+0xcc>)
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	f7ff ffa8 	bl	8000590 <Set_Register>
            for (int i = 0; i < 8; i++) {
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	3301      	adds	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	2b07      	cmp	r3, #7
 800064a:	ddf0      	ble.n	800062e <Scroll_Text+0x4a>
            }
            Shift_Array(copyarr, copyarr);
 800064c:	f107 0208 	add.w	r2, r7, #8
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f86e 	bl	8000738 <Shift_Array>

            if (d > 6) {
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b06      	cmp	r3, #6
 8000660:	dd0d      	ble.n	800067e <Scroll_Text+0x9a>
                Copy_Array(*(data + 1), characters, copyarr);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	f107 0208 	add.w	r2, r7, #8
 800066c:	490f      	ldr	r1, [pc, #60]	; (80006ac <Scroll_Text+0xc8>)
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f820 	bl	80006b4 <Copy_Array>
                Buffer_Array(copyarr);
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4618      	mov	r0, r3
 800067a:	f000 f83f 	bl	80006fc <Buffer_Array>
            }
            delay1();
 800067e:	f7ff fedf 	bl	8000440 <delay1>
            Set_Register(MAX7219_SHUTDOWN_REG, 0x1);
 8000682:	2101      	movs	r1, #1
 8000684:	200c      	movs	r0, #12
 8000686:	f7ff ff83 	bl	8000590 <Set_Register>
        for (int d = 0; d < 8; d++) {
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	2b07      	cmp	r3, #7
 8000694:	ddc8      	ble.n	8000628 <Scroll_Text+0x44>
        }
        data++;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3301      	adds	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
    while (*data) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1be      	bne.n	8000622 <Scroll_Text+0x3e>
    }
}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000000c 	.word	0x2000000c
 80006b0:	200000a8 	.word	0x200000a8

080006b4 <Copy_Array>:


//Copy the Array from font (size 4) table to a local array
void Copy_Array(char index, char *orig, char *copy) {
 80006b4:	b480      	push	{r7}
 80006b6:	b087      	sub	sp, #28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	73fb      	strb	r3, [r7, #15]

        for (int p = 0; p < 4; p++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	e00e      	b.n	80006e6 <Copy_Array+0x32>
            *copy = characters[(index - 0x41) * 4 + p];
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	3b41      	subs	r3, #65	; 0x41
 80006cc:	009a      	lsls	r2, r3, #2
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a09      	ldr	r2, [pc, #36]	; (80006f8 <Copy_Array+0x44>)
 80006d4:	5cd2      	ldrb	r2, [r2, r3]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	701a      	strb	r2, [r3, #0]
            copy++;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	607b      	str	r3, [r7, #4]
        for (int p = 0; p < 4; p++) {
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3301      	adds	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	dded      	ble.n	80006c8 <Copy_Array+0x14>
        }
}
 80006ec:	bf00      	nop
 80006ee:	371c      	adds	r7, #28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	2000000c 	.word	0x2000000c

080006fc <Buffer_Array>:
/*
 * Copy the array from local array to MatrixBuffer[]
 * Only the content in MatrixBuffer is displayed
 *
 */
void Buffer_Array(char *orig) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    for (int p = 0; p < 8; p++) {
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e00a      	b.n	8000720 <Buffer_Array+0x24>
        MatrixBuffer[p + 8] = orig[p];
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	441a      	add	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3308      	adds	r3, #8
 8000714:	7811      	ldrb	r1, [r2, #0]
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <Buffer_Array+0x38>)
 8000718:	54d1      	strb	r1, [r2, r3]
    for (int p = 0; p < 8; p++) {
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	2b07      	cmp	r3, #7
 8000724:	ddf1      	ble.n	800070a <Buffer_Array+0xe>
    }
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000a8 	.word	0x200000a8

08000738 <Shift_Array>:

/*
 * Shift the buffer array in to Left
 *
 */
void Shift_Array(char *orig, char *copy) {
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

    for (int s = 0; s < 12; s++) {
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e00b      	b.n	8000760 <Shift_Array+0x28>
        MatrixBuffer[s] = MatrixBuffer[s + 1];
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3301      	adds	r3, #1
 800074c:	4a09      	ldr	r2, [pc, #36]	; (8000774 <Shift_Array+0x3c>)
 800074e:	5cd1      	ldrb	r1, [r2, r3]
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <Shift_Array+0x3c>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	460a      	mov	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
    for (int s = 0; s < 12; s++) {
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b0b      	cmp	r3, #11
 8000764:	ddf0      	ble.n	8000748 <Shift_Array+0x10>
    }
}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	200000a8 	.word	0x200000a8

08000778 <GPIO_Config>:
void RESET_GPIO(GPIO_TypeDef *GPIOx) {
    GPIOx->MODER = 0x00;
}

void GPIO_Config(GPIO_TypeDef *GPIOx, int pinnum, GPIO_ModeTypeDef mode,
        GPIO_PUPDTypeDef pupd, GPIO_AFTypeDef alternatefunction) {
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	4611      	mov	r1, r2
 8000784:	461a      	mov	r2, r3
 8000786:	460b      	mov	r3, r1
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	4613      	mov	r3, r2
 800078c:	71bb      	strb	r3, [r7, #6]
    GPIOx->MODER |= mode << (2 * pinnum);
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	79f9      	ldrb	r1, [r7, #7]
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	0052      	lsls	r2, r2, #1
 8000798:	fa01 f202 	lsl.w	r2, r1, r2
 800079c:	431a      	orrs	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	601a      	str	r2, [r3, #0]
    GPIOx->PUPDR |= pupd << (2 * pinnum);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	79b9      	ldrb	r1, [r7, #6]
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	431a      	orrs	r2, r3
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	60da      	str	r2, [r3, #12]

    if (mode == Alternate_Mode) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d119      	bne.n	80007f0 <GPIO_Config+0x78>
        GPIOx->AFR[pinnum >> 3] |= alternatefunction << ((pinnum % 8) * 4);
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	10da      	asrs	r2, r3, #3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c8:	7e3a      	ldrb	r2, [r7, #24]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4258      	negs	r0, r3
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	f000 0007 	and.w	r0, r0, #7
 80007d6:	bf58      	it	pl
 80007d8:	4243      	negpl	r3, r0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	4618      	mov	r0, r3
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	10da      	asrs	r2, r3, #3
 80007e6:	4301      	orrs	r1, r0
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3208      	adds	r2, #8
 80007ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <GPIO_Write>:

void GPIO_Write(GPIO_TypeDef *GPIOx, int pinnum, uint16_t state) {
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	4613      	mov	r3, r2
 8000808:	80fb      	strh	r3, [r7, #6]
    if (state == 1) {
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d109      	bne.n	8000824 <GPIO_Write+0x28>
        GPIOx->ODR |= 1 << (pinnum);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	2101      	movs	r1, #1
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	fa01 f202 	lsl.w	r2, r1, r2
 800081c:	431a      	orrs	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	615a      	str	r2, [r3, #20]
    } else {
        GPIOx->ODR &= ~(1 << (pinnum));
    }
}
 8000822:	e009      	b.n	8000838 <GPIO_Write+0x3c>
        GPIOx->ODR &= ~(1 << (pinnum));
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	2101      	movs	r1, #1
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	fa01 f202 	lsl.w	r2, r1, r2
 8000830:	43d2      	mvns	r2, r2
 8000832:	401a      	ands	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	615a      	str	r2, [r3, #20]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <SPI_Config>:
#include <sp_stm32_spi.h>

void SPI_Config(SPI_TypeDef *spix, SPI_BaudRateTypeDef baudratepslcr,
        SPI_BIDIModeTypeDef bidimode, SPI_FirstTypeDef firstmsblsb,
        SPI_DataFrameTypeDef dataframe, SPI_MasterTypeDef masterslave,
        SPI_BIDIOETypeDef receivetransmit) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	4608      	mov	r0, r1
 800084e:	4611      	mov	r1, r2
 8000850:	461a      	mov	r2, r3
 8000852:	4603      	mov	r3, r0
 8000854:	70fb      	strb	r3, [r7, #3]
 8000856:	460b      	mov	r3, r1
 8000858:	70bb      	strb	r3, [r7, #2]
 800085a:	4613      	mov	r3, r2
 800085c:	707b      	strb	r3, [r7, #1]

    spix->CR1 |= baudratepslcr << (3) | firstmsblsb << (7) | dataframe << (11)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	78fa      	ldrb	r2, [r7, #3]
 8000864:	00d1      	lsls	r1, r2, #3
 8000866:	787a      	ldrb	r2, [r7, #1]
 8000868:	01d2      	lsls	r2, r2, #7
 800086a:	4311      	orrs	r1, r2
 800086c:	7c3a      	ldrb	r2, [r7, #16]
 800086e:	02d2      	lsls	r2, r2, #11
 8000870:	4311      	orrs	r1, r2
            | bidimode << (15) | masterslave << (2) | receivetransmit << (14)
 8000872:	78ba      	ldrb	r2, [r7, #2]
 8000874:	03d2      	lsls	r2, r2, #15
 8000876:	4311      	orrs	r1, r2
 8000878:	7d3a      	ldrb	r2, [r7, #20]
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	4311      	orrs	r1, r2
 800087e:	7e3a      	ldrb	r2, [r7, #24]
 8000880:	0392      	lsls	r2, r2, #14
 8000882:	430a      	orrs	r2, r1
    spix->CR1 |= baudratepslcr << (3) | firstmsblsb << (7) | dataframe << (11)
 8000884:	4313      	orrs	r3, r2
 8000886:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	601a      	str	r2, [r3, #0]
            | 1 << (8) | 1 << (9);
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <SPI_Enable>:

void SPI_Enable(SPI_TypeDef *spix) {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
    spix->CR1 |= 1 << (6);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]

}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SPI_TxBufferEmpty>:

void SPI_TxBufferEmpty(SPI_TypeDef *spix) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
    while (!(SPI1->SR & 1 << (1)))
 80008c4:	bf00      	nop
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <SPI_TxBufferEmpty+0x24>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d0f9      	beq.n	80008c6 <SPI_TxBufferEmpty+0xa>
        ;

}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40013000 	.word	0x40013000

080008e4 <SPI_NotBusy>:

void SPI_NotBusy(SPI_TypeDef *spix) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    while ((SPI1->SR & 1 << (7)))
 80008ec:	bf00      	nop
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SPI_NotBusy+0x24>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f9      	bne.n	80008ee <SPI_NotBusy+0xa>
        ;

}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40013000 	.word	0x40013000

0800090c <SPI_Senddata>:

void SPI_Senddata(SPI_TypeDef *spix, uint16_t data) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	807b      	strh	r3, [r7, #2]
    spix->DR = data;
 8000918:	887a      	ldrh	r2, [r7, #2]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	60da      	str	r2, [r3, #12]
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <USART_Config>:
 *      Author: sijan pahari
 */

#include <sp_stm32_uart.h>

void USART_Config(USART_TypeDef *USARTx, USART_ConfigTypedef huartx) {
 800092a:	b084      	sub	sp, #16
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	f107 0014 	add.w	r0, r7, #20
 8000938:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    USARTx->CR1 |= (uint32_t) huartx.Mode | huartx.Oversampling_Mode
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68da      	ldr	r2, [r3, #12]
 8000940:	6979      	ldr	r1, [r7, #20]
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	4319      	orrs	r1, r3
            | huartx.Parity_Control | huartx.Parity_Selection;
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4319      	orrs	r1, r3
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	430b      	orrs	r3, r1
    USARTx->CR1 |= (uint32_t) huartx.Mode | huartx.Oversampling_Mode
 800094e:	431a      	orrs	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	60da      	str	r2, [r3, #12]
    USARTx->BRR = huartx.Baudrate;
 8000954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	609a      	str	r2, [r3, #8]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	b004      	add	sp, #16
 8000966:	4770      	bx	lr

08000968 <USART_Enable>:

void USART_Enable(USART_TypeDef *USARTx) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    USARTx->CR1 |= 1 << (13);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	60da      	str	r2, [r3, #12]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <__libc_init_array>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	4e0d      	ldr	r6, [pc, #52]	; (80009c0 <__libc_init_array+0x38>)
 800098c:	4c0d      	ldr	r4, [pc, #52]	; (80009c4 <__libc_init_array+0x3c>)
 800098e:	1ba4      	subs	r4, r4, r6
 8000990:	10a4      	asrs	r4, r4, #2
 8000992:	2500      	movs	r5, #0
 8000994:	42a5      	cmp	r5, r4
 8000996:	d109      	bne.n	80009ac <__libc_init_array+0x24>
 8000998:	4e0b      	ldr	r6, [pc, #44]	; (80009c8 <__libc_init_array+0x40>)
 800099a:	4c0c      	ldr	r4, [pc, #48]	; (80009cc <__libc_init_array+0x44>)
 800099c:	f000 f818 	bl	80009d0 <_init>
 80009a0:	1ba4      	subs	r4, r4, r6
 80009a2:	10a4      	asrs	r4, r4, #2
 80009a4:	2500      	movs	r5, #0
 80009a6:	42a5      	cmp	r5, r4
 80009a8:	d105      	bne.n	80009b6 <__libc_init_array+0x2e>
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009b0:	4798      	blx	r3
 80009b2:	3501      	adds	r5, #1
 80009b4:	e7ee      	b.n	8000994 <__libc_init_array+0xc>
 80009b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ba:	4798      	blx	r3
 80009bc:	3501      	adds	r5, #1
 80009be:	e7f2      	b.n	80009a6 <__libc_init_array+0x1e>
 80009c0:	080009e8 	.word	0x080009e8
 80009c4:	080009e8 	.word	0x080009e8
 80009c8:	080009e8 	.word	0x080009e8
 80009cc:	080009ec 	.word	0x080009ec

080009d0 <_init>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	bf00      	nop
 80009d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d6:	bc08      	pop	{r3}
 80009d8:	469e      	mov	lr, r3
 80009da:	4770      	bx	lr

080009dc <_fini>:
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009de:	bf00      	nop
 80009e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e2:	bc08      	pop	{r3}
 80009e4:	469e      	mov	lr, r3
 80009e6:	4770      	bx	lr
